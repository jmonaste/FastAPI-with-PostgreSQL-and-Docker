# tests/test_vehicles.py
import pytest
import uuid
from fastapi import status
import pytest_asyncio
from constants.exceptions import (
    VEHICLE_MODEL_NOT_FOUND,
    COLOR_NOT_FOUND,
    INITIAL_STATE_NOT_FOUND,
    VIN_ALREADY_EXISTS,
    INVALID_VIN,
    VEHICLE_NOT_FOUND
)


# Lista de 50 VINs únicos
VIN_LIST = [
    "1HGCM82633A004351",
    "1FAFP404X1F123456",
    "2HGFA16578H123456",
    "3FAHP07Z34R123456",
    "4T1BE46K67U123456",
    "5XYKT3A68EG123456",
    "JHMCM56557C404453",
    "WDBRF61JX1F123456",
    "1C4RJEBG4FC123456",
    "1FTFW1EF1EKF51234",
    "1GCHK29U34E123456",
    "JT3HD4K77A1234567",
    "KMHDU46D44U123456",
    "WAUZZZ8P15A123456",
    "2T1BURHE1JC123456",
    "3VWFE21C04M123456",
    "1G1ZD5ST0JF123456",
    "1N4AL3AP5JC123456",
    "JH4KA8260MC123456",
    "SCBCR83J7GK123456",
    "4USBT935XL1234567",
    "SALVP2BG7FH123456",
    "1NXBR32E54Z123456",
    "2HKRM4H75LH123456",
    "WBA3A5C55DF123456",
    "1GNEK13ZX3R123456",
    "1FTRW12L4XEB12345",
    "JN1CV6EK5FM123456",
    "WDDGF4HB3JA123456",
    "1G1ZS56852F123456",
    "5TDBT48A76S123456",
    "3GCUKREC4DG123456",
    "1FAFP43X74F123456",
    "1HGCM55477A123456",
    "2G1WF52E659123456",
    "1G6AU8ED0K1123456",
    "1NXBR32E54Z123457",
    "2HKRM4H75LH123457",
    "3VWFE21C04M123457",
    "JHMFA16506S123456",
    "5YJSA1CN5DF123456",
    "1G1ZD5ST0JF123457",
    "1N4AL3AP5JC123457",
    "JH4KA8260MC123457",
    "SCBCR83J7GK123457",
    "4USBT935XL123457",
    "SALVP2BG7FH123457",
    "1FTFW1EF1EKF51235",
    "2HNYD28338H123457",
    "1GNEK13ZX3R123457",
    "1FTRW12L4XEB12346",
    "3FAHP0HA1CR123457",
    "1C4RJFAG9GC123457",
    "1G1ZS56852F123457",
    "5TDBT48A76S123457",
    "3GCUKREC4DG123457",
    "1FAFP43X74F123457",
    "1HGCM55477A123457",
    "2G1WF52E659123457",
    "1G6AU8ED0K1123457",
    "1NXBR32E54Z123458",
    "2HKRM4H75LH123458",
    "3VWFE21C04M123458",
    "JHMFA16507S123456",
    "5YJSA1CN5DF123457",
    "1G1ZD5ST0JF123458",
    "1N4AL3AP5JC123458",
    "JH4KA8260MC123458",
    "SCBCR83J7GK123458",
    "4USBT935XL123458",
    "SALVP2BG7FH123458",
    "1FTFW1EF1EKF51236",
    "2HNYD28338H123458",
    "1GNEK13ZX3R123458",
    "1FTRW12L4XEB12347",
    "JN1CV6EK5FM123458",
    "3FAHP0HA1CR123458",
    "WDDGF4HB3JA123458",
    "1C4RJFAG9GC123458",
    "1G1ZS56852F123458",
    "5TDBT48A76S123458",
    "3GCUKREC4DG123458",
    "1FAFP43X74F123458",
    "1HGCM55477A123458",
    "2G1WF52E659123458",
    "1G6AU8ED0K1123458",
    "1NXBR32E54Z123459",
    "2HKRM4H75LH123459",
    "3VWFE21C04M123459",
    "JHMFA16508S123456",
    "5YJSA1CN5DF123458",
    "1G1ZD5ST0JF123459",
    "1N4AL3AP5JC123459",
    "JH4KA8260MC123459",
    "SCBCR83J7GK123459",
    "4USBT935XL123459",
    "SALVP2BG7FH123459",
    "1FTFW1EF1EKF51237",
    "2HNYD28338H123459",
    "1GNEK13ZX3R123459",
    "1FTRW12L4XEB12348",
    "3FAHP0HA1CR123459",
    "WBA3A5C55DF123459",
    "JHMFA16509S123456",
    "1FAFP404X1F123457",
    "2HGFA16578H123457",
    "3FAHP07Z34R123457",
    "4T1BE46K67U123457",
    "5XYKT3A68EG123457",
    "JHMCM56557C404457",
    "WDBRF61JX1F123457",
    "1C4RJEBG4FC123457",
    "1FTFW1EF1EKF51235",
    "1GCHK29U34E123457",
    "JT3HD4K77A123457",
    "KMHDU46D44U123457",
    "WAUZZZ8P15A123457",
    "2T1BURHE1JC123457",
    "3VWFE21C04M123457",
    "1G1ZD5ST0JF123457",
    "1N4AL3AP5JC123457",
    "JH4KA8260MC123457",
    "SCBCR83J7GK123457",
    "4USBT935XL123457",
    "SALVP2BG7FH123457",
    "1NXBR32E54Z123457",
    "2HKRM4H75LH123457",
    "WBA3A5C55DF123457",
    "1GNEK13ZX3R123457",
    "1FTRW12L4XEB12346",
    "JN1CV6EK5FM123457",
    "3FAHP0HA1CR123457",
    "WDDGF4HB3JA123457",
    "1C4RJFAG9GC123457",
    "1G1ZS56852F123457",
    "5TDBT48A76S123457",
    "3GCUKREC4DG123457",
    "1FAFP43X74F123457",
    "1HGCM55477A123457",
    "2G1WF52E659123457",
    "1G6AU8ED0K1123457",
    "1NXBR32E54Z123458",
    "2HKRM4H75LH123458",
    "3VWFE21C04M123458",
    "JHMFA16507S123456",
    "5YJSA1CN5DF123457",
    "1G1ZD5ST0JF123458",
    "1N4AL3AP5JC123458",
    "JH4KA8260MC123458",
    "SCBCR83J7GK123458",
    "4USBT935XL123458",
    "SALVP2BG7FH123458",
    "1FTFW1EF1EKF51236",
    "2HNYD28338H123458",
    "1GNEK13ZX3R123458",
    "1FTRW12L4XEB12347",
    "JN1CV6EK5FM123458",
    "3FAHP0HA1CR123458",
    "WDDGF4HB3JA123458",
    "1C4RJFAG9GC123458",
    "1G1ZS56852F123458",
    "5TDBT48A76S123458",
    "3GCUKREC4DG123458",
    "1FAFP43X74F123458",
    "1HGCM55477A123458",
    "2G1WF52E659123458",
    "1G6AU8ED0K1123458",
    "1NXBR32E54Z123459",
    "2HKRM4H75LH123459",
    "3VWFE21C04M123459",
    "JHMFA16508S123456",
    "5YJSA1CN5DF123458",
    "1G1ZD5ST0JF123459",
    "1N4AL3AP5JC123459",
    "JH4KA8260MC123459",
    "SCBCR83J7GK123459",
    "4USBT935XL123459",
    "SALVP2BG7FH123459",
    "1FTFW1EF1EKF51237",
    "2HNYD28338H123459",
    "1GNEK13ZX3R123459",
    "1FTRW12L4XEB12348",
    "3FAHP0HA1CR123459",
    "WBA3A5C55DF123459",
    "JHMFA16509S123456"
]




@pytest.fixture
def headers(auth_tokens):
    """Prepara los encabezados de autorización para las solicitudes."""
    return {"Authorization": f"Bearer {auth_tokens['access_token']}"}


@pytest.mark.asyncio
@pytest.mark.parametrize("vin", VIN_LIST)
async def test_create_vehicle_success(httpx_client, headers, vin):
    """Prueba la creación exitosa de un vehículo con datos válidos."""

    vehicle_data = {
        "vehicle_model_id": 6,
        "vin": vin,
        "color_id": 2,
        "is_urgent": False
    }
    create_vehicle_response = httpx_client.post("/api/vehicles", headers=headers, json=vehicle_data)
    assert create_vehicle_response.status_code == status.HTTP_201_CREATED, f"Respuesta: {create_vehicle_response.text}"
    
